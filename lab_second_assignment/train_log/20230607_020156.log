2023/06/07 02:01:57 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.11 (main, Apr  5 2023, 14:15:10) [GCC 9.4.0]
    CUDA available: True
    numpy_random_seed: 1201483664
    GPU 0: Tesla T4
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: x86_64-linux-gnu-gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 2.0.1+cu118
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.2+cu118
    OpenCV: 4.7.0
    MMEngine: 0.7.4

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1201483664
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/07 02:01:57 - mmengine - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=30,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=1),
    init_cfg=dict(
        type='Pretrained',
        checkpoint=
        'https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth'
    ))
dataset_type = 'CustomDataset'
data_preprocessor = dict(
    num_classes=1000,
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', scale=224),
    dict(type='RandomFlip', prob=0.5, direction='horizontal'),
    dict(type='PackInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='ResizeEdge', scale=256, edge='short'),
    dict(type='CenterCrop', crop_size=224),
    dict(type='PackInputs')
]
train_dataloader = dict(
    pin_memory=True,
    persistent_workers=True,
    collate_fn=dict(type='default_collate'),
    batch_size=32,
    num_workers=2,
    dataset=dict(
        type='CustomDataset',
        data_root='data',
        with_label=True,
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', scale=224),
            dict(type='RandomFlip', prob=0.5, direction='horizontal'),
            dict(type='PackInputs')
        ]),
    sampler=dict(type='DefaultSampler', shuffle=True))
val_dataloader = dict(
    pin_memory=True,
    persistent_workers=True,
    collate_fn=dict(type='default_collate'),
    batch_size=32,
    num_workers=2,
    dataset=dict(
        type='CustomDataset',
        data_root='data',
        with_label=True,
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='ResizeEdge', scale=256, edge='short'),
            dict(type='CenterCrop', crop_size=224),
            dict(type='PackInputs')
        ]),
    sampler=dict(type='DefaultSampler', shuffle=False))
val_evaluator = dict(type='Accuracy', topk=1)
test_dataloader = dict(
    pin_memory=True,
    persistent_workers=True,
    collate_fn=dict(type='default_collate'),
    batch_size=32,
    num_workers=2,
    dataset=dict(
        type='CustomDataset',
        data_root='data',
        with_label=True,
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='ResizeEdge', scale=256, edge='short'),
            dict(type='CenterCrop', crop_size=224),
            dict(type='PackInputs')
        ]),
    sampler=dict(type='DefaultSampler', shuffle=False))
test_evaluator = dict(type='Accuracy', topk=1)
optim_wrapper = dict(
    optimizer=dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001),
    type='AmpOptimWrapper',
    loss_scale=512.0)
param_scheduler = dict(
    type='MultiStepLR', by_epoch=True, milestones=[30, 60, 90], gamma=0.1)
train_cfg = dict(by_epoch=True, max_epochs=10, val_interval=1)
val_cfg = dict()
test_cfg = dict()
default_scope = 'mmpretrain'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=100),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(
        type='CheckpointHook', interval=1, max_keep_ckpts=1, save_best='auto'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='VisualizationHook', enable=False))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='UniversalVisualizer', vis_backends=[dict(type='LocalVisBackend')])
log_level = 'INFO'
resume = False
randomness = dict(seed=None, deterministic=False)
launcher = 'none'
work_dir = 'outputs'

2023/06/07 02:02:02 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/07 02:02:02 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/07 02:02:04 - mmengine - INFO - load model from: https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth
2023/06/07 02:02:04 - mmengine - INFO - Loads checkpoint by http backend from path: https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth
2023/06/07 02:02:04 - mmengine - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 2048]) from checkpoint, the shape in current model is torch.Size([30, 2048]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([30]).
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/fp16/resnet50_batch256_fp16_imagenet_20210320-b3964210.pth 

head.fc.weight - torch.Size([30, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([30]): 
NormalInit: mean=0, std=0.01, bias=0 
2023/06/07 02:02:04 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/07 02:02:04 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/07 02:02:04 - mmengine - INFO - Checkpoints will be saved to /content/mmpretrain/outputs.
2023/06/07 02:02:23 - mmengine - INFO - Epoch(train)  [1][100/137]  lr: 1.0000e-02  eta: 0:04:03  time: 0.2081  data_time: 0.0738  memory: 1637  loss: 1.2434
2023/06/07 02:02:30 - mmengine - INFO - Exp name: resnet50_8xb32-fp16_in1k_20230607_020156
2023/06/07 02:02:30 - mmengine - INFO - Saving checkpoint at 1 epochs
2023/06/07 02:02:47 - mmengine - INFO - Epoch(val)  [1][100/137]    eta: 0:00:05  time: 0.1431  data_time: 0.0595  memory: 1637  
2023/06/07 02:02:52 - mmengine - INFO - Epoch(val) [1][137/137]    accuracy/top1: 76.6400  data_time: 0.0663  time: 0.1510
2023/06/07 02:02:53 - mmengine - INFO - The best checkpoint with 76.6400 accuracy/top1 at 1 epoch is saved to best_accuracy_top1_epoch_1.pth.
2023/06/07 02:03:12 - mmengine - INFO - Epoch(train)  [2][100/137]  lr: 1.0000e-02  eta: 0:03:25  time: 0.1362  data_time: 0.0134  memory: 1637  loss: 1.1952
2023/06/07 02:03:19 - mmengine - INFO - Exp name: resnet50_8xb32-fp16_in1k_20230607_020156
2023/06/07 02:03:19 - mmengine - INFO - Saving checkpoint at 2 epochs
2023/06/07 02:03:37 - mmengine - INFO - Epoch(val)  [2][100/137]    eta: 0:00:05  time: 0.1977  data_time: 0.1101  memory: 1637  
2023/06/07 02:03:42 - mmengine - INFO - Epoch(val) [2][137/137]    accuracy/top1: 80.0457  data_time: 0.0653  time: 0.1515
2023/06/07 02:03:42 - mmengine - INFO - The previous best checkpoint /content/mmpretrain/outputs/best_accuracy_top1_epoch_1.pth is removed
2023/06/07 02:03:43 - mmengine - INFO - The best checkpoint with 80.0457 accuracy/top1 at 2 epoch is saved to best_accuracy_top1_epoch_2.pth.
2023/06/07 02:04:01 - mmengine - INFO - Epoch(train)  [3][100/137]  lr: 1.0000e-02  eta: 0:03:00  time: 0.1343  data_time: 0.0079  memory: 1637  loss: 0.8105
2023/06/07 02:04:07 - mmengine - INFO - Exp name: resnet50_8xb32-fp16_in1k_20230607_020156
2023/06/07 02:04:07 - mmengine - INFO - Saving checkpoint at 3 epochs
2023/06/07 02:04:25 - mmengine - INFO - Epoch(val)  [3][100/137]    eta: 0:00:05  time: 0.2159  data_time: 0.1268  memory: 1637  
2023/06/07 02:04:31 - mmengine - INFO - Epoch(val) [3][137/137]    accuracy/top1: 81.6229  data_time: 0.0707  time: 0.1590
2023/06/07 02:04:31 - mmengine - INFO - The previous best checkpoint /content/mmpretrain/outputs/best_accuracy_top1_epoch_2.pth is removed
2023/06/07 02:04:32 - mmengine - INFO - The best checkpoint with 81.6229 accuracy/top1 at 3 epoch is saved to best_accuracy_top1_epoch_3.pth.
2023/06/07 02:04:53 - mmengine - INFO - Epoch(train)  [4][100/137]  lr: 1.0000e-02  eta: 0:02:35  time: 0.1459  data_time: 0.0177  memory: 1637  loss: 0.7082
2023/06/07 02:04:59 - mmengine - INFO - Exp name: resnet50_8xb32-fp16_in1k_20230607_020156
2023/06/07 02:04:59 - mmengine - INFO - Saving checkpoint at 4 epochs
2023/06/07 02:05:17 - mmengine - INFO - Epoch(val)  [4][100/137]    eta: 0:00:05  time: 0.2185  data_time: 0.1271  memory: 1637  
2023/06/07 02:05:23 - mmengine - INFO - Epoch(val) [4][137/137]    accuracy/top1: 90.0114  data_time: 0.0673  time: 0.1578
2023/06/07 02:05:23 - mmengine - INFO - The previous best checkpoint /content/mmpretrain/outputs/best_accuracy_top1_epoch_3.pth is removed
2023/06/07 02:05:24 - mmengine - INFO - The best checkpoint with 90.0114 accuracy/top1 at 4 epoch is saved to best_accuracy_top1_epoch_4.pth.
2023/06/07 02:05:43 - mmengine - INFO - Epoch(train)  [5][100/137]  lr: 1.0000e-02  eta: 0:02:09  time: 0.1538  data_time: 0.0270  memory: 1637  loss: 0.6611
2023/06/07 02:05:48 - mmengine - INFO - Exp name: resnet50_8xb32-fp16_in1k_20230607_020156
2023/06/07 02:05:48 - mmengine - INFO - Saving checkpoint at 5 epochs
2023/06/07 02:06:05 - mmengine - INFO - Epoch(val)  [5][100/137]    eta: 0:00:05  time: 0.1339  data_time: 0.0441  memory: 1637  
2023/06/07 02:06:13 - mmengine - INFO - Epoch(val) [5][137/137]    accuracy/top1: 92.1600  data_time: 0.0755  time: 0.1658
2023/06/07 02:06:13 - mmengine - INFO - The previous best checkpoint /content/mmpretrain/outputs/best_accuracy_top1_epoch_4.pth is removed
2023/06/07 02:06:14 - mmengine - INFO - The best checkpoint with 92.1600 accuracy/top1 at 5 epoch is saved to best_accuracy_top1_epoch_5.pth.
2023/06/07 02:06:32 - mmengine - INFO - Epoch(train)  [6][100/137]  lr: 1.0000e-02  eta: 0:01:42  time: 0.1488  data_time: 0.0221  memory: 1637  loss: 0.6094
2023/06/07 02:06:37 - mmengine - INFO - Exp name: resnet50_8xb32-fp16_in1k_20230607_020156
2023/06/07 02:06:37 - mmengine - INFO - Saving checkpoint at 6 epochs
2023/06/07 02:06:55 - mmengine - INFO - Epoch(val)  [6][100/137]    eta: 0:00:06  time: 0.1387  data_time: 0.0493  memory: 1637  
2023/06/07 02:07:01 - mmengine - INFO - Epoch(val) [6][137/137]    accuracy/top1: 90.8343  data_time: 0.0741  time: 0.1647
2023/06/07 02:07:18 - mmengine - INFO - Epoch(train)  [7][100/137]  lr: 1.0000e-02  eta: 0:01:17  time: 0.2317  data_time: 0.0933  memory: 1637  loss: 0.5131
2023/06/07 02:07:25 - mmengine - INFO - Exp name: resnet50_8xb32-fp16_in1k_20230607_020156
2023/06/07 02:07:25 - mmengine - INFO - Saving checkpoint at 7 epochs
2023/06/07 02:07:42 - mmengine - INFO - Epoch(val)  [7][100/137]    eta: 0:00:05  time: 0.1327  data_time: 0.0430  memory: 1637  
2023/06/07 02:07:47 - mmengine - INFO - Epoch(val) [7][137/137]    accuracy/top1: 88.6629  data_time: 0.0607  time: 0.1502
2023/06/07 02:07:55 - mmengine - INFO - Exp name: resnet50_8xb32-fp16_in1k_20230607_020156
2023/06/07 02:08:04 - mmengine - INFO - Epoch(train)  [8][100/137]  lr: 1.0000e-02  eta: 0:00:53  time: 0.1378  data_time: 0.0096  memory: 1637  loss: 0.4126
2023/06/07 02:08:11 - mmengine - INFO - Exp name: resnet50_8xb32-fp16_in1k_20230607_020156
2023/06/07 02:08:11 - mmengine - INFO - Saving checkpoint at 8 epochs
2023/06/07 02:08:30 - mmengine - INFO - Epoch(val)  [8][100/137]    eta: 0:00:05  time: 0.2215  data_time: 0.1295  memory: 1637  
2023/06/07 02:08:36 - mmengine - INFO - Epoch(val) [8][137/137]    accuracy/top1: 91.6571  data_time: 0.0730  time: 0.1636
2023/06/07 02:08:53 - mmengine - INFO - Epoch(train)  [9][100/137]  lr: 1.0000e-02  eta: 0:00:30  time: 0.1499  data_time: 0.0239  memory: 1637  loss: 0.5465
2023/06/07 02:08:58 - mmengine - INFO - Exp name: resnet50_8xb32-fp16_in1k_20230607_020156
2023/06/07 02:08:58 - mmengine - INFO - Saving checkpoint at 9 epochs
2023/06/07 02:09:16 - mmengine - INFO - Epoch(val)  [9][100/137]    eta: 0:00:05  time: 0.1296  data_time: 0.0422  memory: 1637  
2023/06/07 02:09:22 - mmengine - INFO - Epoch(val) [9][137/137]    accuracy/top1: 93.8057  data_time: 0.0739  time: 0.1637
2023/06/07 02:09:22 - mmengine - INFO - The previous best checkpoint /content/mmpretrain/outputs/best_accuracy_top1_epoch_5.pth is removed
2023/06/07 02:09:24 - mmengine - INFO - The best checkpoint with 93.8057 accuracy/top1 at 9 epoch is saved to best_accuracy_top1_epoch_9.pth.
2023/06/07 02:09:43 - mmengine - INFO - Epoch(train) [10][100/137]  lr: 1.0000e-02  eta: 0:00:06  time: 0.1908  data_time: 0.0578  memory: 1637  loss: 0.3976
2023/06/07 02:09:48 - mmengine - INFO - Exp name: resnet50_8xb32-fp16_in1k_20230607_020156
2023/06/07 02:09:48 - mmengine - INFO - Saving checkpoint at 10 epochs
2023/06/07 02:10:05 - mmengine - INFO - Epoch(val) [10][100/137]    eta: 0:00:05  time: 0.1237  data_time: 0.0331  memory: 1637  
2023/06/07 02:10:11 - mmengine - INFO - Epoch(val) [10][137/137]    accuracy/top1: 92.0457  data_time: 0.0641  time: 0.1541
